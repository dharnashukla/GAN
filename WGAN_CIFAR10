{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.5"
    },
    "colab": {
      "name": " WGAN_CIFAR10_lat_dim1",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "26kWIGC224sq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from __future__ import print_function, division\n",
        "from numpy import expand_dims\n",
        "from PIL import Image\n",
        "from numpy import ones\n",
        "from numpy import zeros\n",
        "from numpy.random import randn\n",
        "from numpy.random import randint\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.models import Sequential,Model\n",
        "from tensorflow.keras.layers import Dense,Reshape, Flatten, Dropout,BatchNormalization, Activation, ZeroPadding2D,UpSampling2D\n",
        "from tensorflow.keras.layers import Conv2D,MaxPooling2D,Conv2DTranspose\n",
        "from tensorflow.keras.layers import Flatten\n",
        "from tensorflow.keras.layers import Dropout\n",
        "from tensorflow.keras.layers import LeakyReLU\n",
        "from tensorflow.keras.layers import Input\n",
        "from numpy import vstack\n",
        "import numpy as np\n",
        "import matplotlib\n",
        "from tqdm import tqdm\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras import initializers\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "import keras.backend as K\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "from tensorflow.keras.regularizers import L1L2\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EYMCkS3s24su",
        "colab_type": "code",
        "outputId": "93d74a79-f444-40d4-c333-4dc72145a910",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "# Load the dataset\n",
        "(X_train, _), (X_test, _) = cifar10.load_data()\n",
        "X_train = X_test\n",
        "\n",
        "# Rescale -1 to 1\n",
        "X_train = (X_train.astype(np.float32) - 127.5) / 127.5\n",
        "print(X_train.shape)\n",
        "#print(X_train[0])\n",
        "X_train = np.expand_dims(X_train, axis=3)\n",
        "print(X_train.shape)\n",
        "#print(X_train[0])\n",
        "#X_train = X_train.reshape(50000, 3, 32, 32).transpose(0,2,3,1).astype(\"uint8\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(10000, 32, 32, 3)\n",
            "(10000, 32, 32, 1, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "QzmjWIz9_9Kr",
        "colab": {}
      },
      "source": [
        "class WGAN():\n",
        "    def __init__(self):\n",
        "        self.img_rows = 32\n",
        "        self.img_cols = 32\n",
        "        self.channels = 3\n",
        "        self.img_shape = (self.img_rows, self.img_cols, self.channels)\n",
        "        self.latent_dim = 100\n",
        "        self.g_loss = []\n",
        "        self.d_loss = []\n",
        "\n",
        "        # Following parameter and optimizer set as recommended in paper\n",
        "        self.n_critic = 5\n",
        "        self.clip_value = 0.01\n",
        "        optimizer = RMSprop(lr=0.0001)\n",
        "\n",
        "        # Build and compile the critic\n",
        "        self.critic = self.build_critic()\n",
        "        self.critic.compile(loss=self.wasserstein_loss,\n",
        "            optimizer=optimizer,\n",
        "            metrics=['accuracy'])\n",
        "\n",
        "        # Build the generator\n",
        "        self.generator = self.build_generator()\n",
        "\n",
        "        # The generator takes noise as input and generated imgs\n",
        "        z = Input(shape=(self.latent_dim,))\n",
        "        img = self.generator(z)\n",
        "\n",
        "        # For the combined model we will only train the generator\n",
        "        self.critic.trainable = False\n",
        "\n",
        "        # The critic takes generated images as input and determines validity\n",
        "        valid = self.critic(img)\n",
        "\n",
        "        # The combined model  (stacked generator and critic)\n",
        "        self.combined = Model(z, valid)\n",
        "        self.combined.compile(loss=self.wasserstein_loss,\n",
        "            optimizer=optimizer,\n",
        "            metrics=['accuracy'])\n",
        "\n",
        "    def wasserstein_loss(self, y_true, y_pred):\n",
        "        return K.mean(y_true * y_pred)\n",
        "\n",
        "    def build_generator(self):\n",
        "        model = Sequential()\n",
        "    \n",
        "      \n",
        "        model.add(Dense(1024 * 8 * 8, activation=\"relu\", input_dim=self.latent_dim ))\n",
        "        model.add(Reshape((8, 8, 1024)))\n",
        "        model.add(UpSampling2D())\n",
        "        model.add(Conv2D(1024, kernel_size=4, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(Activation(\"relu\"))\n",
        "        model.add(UpSampling2D())\n",
        "        model.add(Conv2D(512, kernel_size=4, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(Activation(\"relu\"))\n",
        "        model.add(Conv2D(256, kernel_size=4, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(Activation(\"relu\"))\n",
        "        model.add(Conv2D(64, kernel_size=4, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(Activation(\"relu\"))\n",
        "        model.add(Conv2D(self.channels, kernel_size=4, padding=\"same\"))\n",
        "        model.add(Activation(\"tanh\"))\n",
        "\n",
        "        model.summary()\n",
        "\n",
        "        noise = Input(shape=(self.latent_dim,))\n",
        "        img = model(noise)\n",
        "\n",
        "        return Model(noise, img)\n",
        "        model.summary()\n",
        "        noise = Input(shape=(self.latent_dim,))\n",
        "        img = model(noise)\n",
        "\n",
        "        return Model(noise, img)\n",
        "\n",
        "    def build_critic(self):\n",
        "\n",
        "        model = Sequential()\n",
        "        model.add(Conv2D(16, kernel_size=3, strides=2, input_shape=self.img_shape, padding=\"same\" ))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Dropout(0.25))\n",
        "        model.add(Conv2D(128, kernel_size=3, strides=2, padding=\"same\"))\n",
        "        model.add(ZeroPadding2D(padding=((0,1),(0,1))))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Dropout(0.25))\n",
        "        model.add(Conv2D(256, kernel_size=3, strides=2, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Dropout(0.25))\n",
        "        model.add(Conv2D(512, kernel_size=3, strides=2, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Dropout(0.25))\n",
        "        model.add(Conv2D(1024, kernel_size=3, strides=1, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(1024, kernel_size=3, strides=1, padding=\"same\"))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Dropout(0.25))\n",
        "        model.add(Flatten())\n",
        "        model.add(Dense(1))\n",
        "\n",
        "        model.summary()\n",
        "\n",
        "        img = Input(shape=self.img_shape)\n",
        "        validity = model(img)\n",
        "\n",
        "        return Model(img, validity)\n",
        "    def train(self, epochs, batch_size=128, sample_interval=50):\n",
        "\n",
        "        # Load the dataset\n",
        "        (X_train, _), (X_test, _) = cifar10.load_data()\n",
        "        X_train = X_test\n",
        "\n",
        "        # Rescale -1 to 1\n",
        "        X_train = (X_train.astype(np.float32) - 127.5) / 127.5\n",
        "        #X_train = np.expand_dims(X_train, axis=3)\n",
        "        X_train = X_train.reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype(\"uint8\")\n",
        "\n",
        "        # Adversarial ground truths\n",
        "        valid = -np.ones((batch_size, 1))\n",
        "        fake = np.ones((batch_size, 1))\n",
        "\n",
        "        for epoch in range(epochs):\n",
        "\n",
        "            for _ in range(self.n_critic):\n",
        "\n",
        "                # ---------------------\n",
        "                #  Train Discriminator\n",
        "                # ---------------------\n",
        "\n",
        "                # Select a random batch of images\n",
        "                idx = np.random.randint(0, X_train.shape[0], batch_size)\n",
        "                imgs = X_train[idx]\n",
        "                \n",
        "                # Sample noise as generator input\n",
        "                noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n",
        "\n",
        "                # Generate a batch of new images\n",
        "                gen_imgs = self.generator.predict(noise)\n",
        "\n",
        "                # Train the critic\n",
        "                d_loss_real = self.critic.train_on_batch(imgs, valid)\n",
        "                d_loss_fake = self.critic.train_on_batch(gen_imgs, fake)\n",
        "                d_loss = 0.5 * np.add(d_loss_fake, d_loss_real)\n",
        "\n",
        "                # Clip critic weights\n",
        "                for l in self.critic.layers:\n",
        "                    weights = l.get_weights()\n",
        "                    weights = [np.clip(w, -self.clip_value, self.clip_value) for w in weights]\n",
        "                    l.set_weights(weights)\n",
        "\n",
        "\n",
        "            # ---------------------\n",
        "            #  Train Generator\n",
        "            # ---------------------\n",
        "\n",
        "            g_loss = self.combined.train_on_batch(noise, valid)\n",
        "\n",
        "            # Plot the progress\n",
        "            print (\"%d [D loss: %f] [G loss: %f]\" % (epoch, 1 - d_loss[0], 1 - g_loss[0]))\n",
        "\n",
        "            # If at save interval => save generated image samples\n",
        "            if epoch % sample_interval == 0:\n",
        "                self.sample_images(epoch)\n",
        "                self.plotLoss(epoch)\n",
        "                \n",
        "            self.g_loss.append(g_loss)\n",
        "            self.d_loss.append(d_loss)\n",
        "\n",
        "    def sample_images(self, epoch):\n",
        "        r, c = 5, 5\n",
        "        noise = np.random.normal(0, 1, (r * c, self.latent_dim))\n",
        "        gen_imgs = self.generator.predict(noise)\n",
        "\n",
        "        # Rescale images 0 - 1\n",
        "        gen_imgs = 0.5 * gen_imgs + 1\n",
        "\n",
        "        fig, axs = plt.subplots(r, c)\n",
        "        cnt = 0\n",
        "        for i in range(r):\n",
        "            for j in range(c):\n",
        "                #print(gen_imgs[cnt])\n",
        "                #axs[i,j].imshow((gen_imgs[cnt,:,:,:]* 255).astype(np.uint8), interpolation='nearest')\n",
        "                axs[i,j].imshow((gen_imgs[cnt]*255).astype(np.uint8), interpolation='nearest')\n",
        "                axs[i,j].axis('off')\n",
        "                cnt += 1\n",
        "        fig.savefig(\"/content/sample_data/images/cifar10_%d.png\" % epoch)\n",
        "        plt.close()\n",
        "        \n",
        "    def plotLoss(self, epoch):\n",
        "        dloss = [x[0] for x in self.d_loss]\n",
        "        gloss = [x[0] for x in self.g_loss]\n",
        "\n",
        "        plt.plot(dloss, label=\"Discriminator\")\n",
        "        plt.plot(gloss, label=\"Generator\")       \n",
        "\n",
        "        plt.xlabel(\"Number of Iterations\")\n",
        "        plt.ylabel(\"Loss\")\n",
        "        plt.grid(True, linestyle='dotted')\n",
        "        plt.legend() #loc=\"upper left\"\n",
        "        \n",
        "        plt.savefig(\"/content/sample_data/images/cifar10_loss_%d.png\" % epoch)\n",
        "        plt.close()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "0d708f77-9a4f-4b0c-c23d-41750b26c5aa",
        "id": "SYs1LI_9_7dB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "wgan = WGAN()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_7 (Conv2D)            (None, 16, 16, 16)        448       \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_4 (LeakyReLU)    (None, 16, 16, 16)        0         \n",
            "_________________________________________________________________\n",
            "dropout_4 (Dropout)          (None, 16, 16, 16)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_8 (Conv2D)            (None, 8, 8, 128)         18560     \n",
            "_________________________________________________________________\n",
            "zero_padding2d_1 (ZeroPaddin (None, 9, 9, 128)         0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_5 (Batch (None, 9, 9, 128)         512       \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_5 (LeakyReLU)    (None, 9, 9, 128)         0         \n",
            "_________________________________________________________________\n",
            "dropout_5 (Dropout)          (None, 9, 9, 128)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_9 (Conv2D)            (None, 5, 5, 256)         295168    \n",
            "_________________________________________________________________\n",
            "batch_normalization_6 (Batch (None, 5, 5, 256)         1024      \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_6 (LeakyReLU)    (None, 5, 5, 256)         0         \n",
            "_________________________________________________________________\n",
            "dropout_6 (Dropout)          (None, 5, 5, 256)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_10 (Conv2D)           (None, 3, 3, 512)         1180160   \n",
            "_________________________________________________________________\n",
            "batch_normalization_7 (Batch (None, 3, 3, 512)         2048      \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_7 (LeakyReLU)    (None, 3, 3, 512)         0         \n",
            "_________________________________________________________________\n",
            "dropout_7 (Dropout)          (None, 3, 3, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_11 (Conv2D)           (None, 3, 3, 1024)        4719616   \n",
            "_________________________________________________________________\n",
            "batch_normalization_8 (Batch (None, 3, 3, 1024)        4096      \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_8 (LeakyReLU)    (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_12 (Conv2D)           (None, 3, 3, 1024)        9438208   \n",
            "_________________________________________________________________\n",
            "batch_normalization_9 (Batch (None, 3, 3, 1024)        4096      \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_9 (LeakyReLU)    (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "dropout_8 (Dropout)          (None, 3, 3, 1024)        0         \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 9216)              0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 1)                 9217      \n",
            "=================================================================\n",
            "Total params: 15,673,153\n",
            "Trainable params: 15,667,265\n",
            "Non-trainable params: 5,888\n",
            "_________________________________________________________________\n",
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_3 (Dense)              (None, 65536)             6619136   \n",
            "_________________________________________________________________\n",
            "reshape_1 (Reshape)          (None, 8, 8, 1024)        0         \n",
            "_________________________________________________________________\n",
            "up_sampling2d_2 (UpSampling2 (None, 16, 16, 1024)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_13 (Conv2D)           (None, 16, 16, 1024)      16778240  \n",
            "_________________________________________________________________\n",
            "batch_normalization_10 (Batc (None, 16, 16, 1024)      4096      \n",
            "_________________________________________________________________\n",
            "activation_3 (Activation)    (None, 16, 16, 1024)      0         \n",
            "_________________________________________________________________\n",
            "up_sampling2d_3 (UpSampling2 (None, 32, 32, 1024)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_14 (Conv2D)           (None, 32, 32, 512)       8389120   \n",
            "_________________________________________________________________\n",
            "batch_normalization_11 (Batc (None, 32, 32, 512)       2048      \n",
            "_________________________________________________________________\n",
            "activation_4 (Activation)    (None, 32, 32, 512)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_15 (Conv2D)           (None, 32, 32, 256)       2097408   \n",
            "_________________________________________________________________\n",
            "batch_normalization_12 (Batc (None, 32, 32, 256)       1024      \n",
            "_________________________________________________________________\n",
            "activation_5 (Activation)    (None, 32, 32, 256)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_16 (Conv2D)           (None, 32, 32, 64)        262208    \n",
            "_________________________________________________________________\n",
            "batch_normalization_13 (Batc (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "activation_6 (Activation)    (None, 32, 32, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_17 (Conv2D)           (None, 32, 32, 3)         3075      \n",
            "_________________________________________________________________\n",
            "activation_7 (Activation)    (None, 32, 32, 3)         0         \n",
            "=================================================================\n",
            "Total params: 34,156,611\n",
            "Trainable params: 34,152,899\n",
            "Non-trainable params: 3,712\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9164e70b-83f8-448e-cc16-30c187016513",
        "id": "hGZvpyL2_6Ec",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "wgan.train(epochs=100, batch_size=32, sample_interval=5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?\n",
            "WARNING:tensorflow:Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?\n",
            "0 [D loss: 0.999247] [G loss: 1.001431]\n",
            "1 [D loss: 0.999343] [G loss: 1.001460]\n",
            "2 [D loss: 0.999363] [G loss: 1.001446]\n",
            "3 [D loss: 0.999346] [G loss: 1.001472]\n",
            "4 [D loss: 0.999359] [G loss: 1.001467]\n",
            "5 [D loss: 0.999373] [G loss: 1.001483]\n",
            "6 [D loss: 0.999363] [G loss: 1.001482]\n",
            "7 [D loss: 0.999359] [G loss: 1.001437]\n",
            "8 [D loss: 0.999362] [G loss: 1.001375]\n",
            "9 [D loss: 0.999389] [G loss: 1.001319]\n",
            "10 [D loss: 0.999398] [G loss: 1.001279]\n",
            "11 [D loss: 0.999405] [G loss: 1.001220]\n",
            "12 [D loss: 0.999454] [G loss: 1.001091]\n",
            "13 [D loss: 0.999473] [G loss: 1.000963]\n",
            "14 [D loss: 0.999511] [G loss: 1.000839]\n",
            "15 [D loss: 0.999561] [G loss: 1.000738]\n",
            "16 [D loss: 0.999586] [G loss: 1.000640]\n",
            "17 [D loss: 0.999631] [G loss: 1.000540]\n",
            "18 [D loss: 0.999667] [G loss: 1.000465]\n",
            "19 [D loss: 0.999694] [G loss: 1.000402]\n",
            "20 [D loss: 0.999728] [G loss: 1.000337]\n",
            "21 [D loss: 0.999756] [G loss: 1.000299]\n",
            "22 [D loss: 0.999780] [G loss: 1.000225]\n",
            "23 [D loss: 0.999806] [G loss: 1.000195]\n",
            "24 [D loss: 0.999835] [G loss: 1.000175]\n",
            "25 [D loss: 0.999839] [G loss: 1.000129]\n",
            "26 [D loss: 0.999855] [G loss: 1.000140]\n",
            "27 [D loss: 0.999859] [G loss: 1.000098]\n",
            "28 [D loss: 0.999871] [G loss: 1.000067]\n",
            "29 [D loss: 0.999858] [G loss: 1.000086]\n",
            "30 [D loss: 0.999885] [G loss: 1.000070]\n",
            "31 [D loss: 0.999879] [G loss: 1.000078]\n",
            "32 [D loss: 0.999882] [G loss: 1.000072]\n",
            "33 [D loss: 0.999885] [G loss: 1.000079]\n",
            "34 [D loss: 0.999889] [G loss: 1.000092]\n",
            "35 [D loss: 0.999904] [G loss: 1.000070]\n",
            "36 [D loss: 0.999890] [G loss: 1.000082]\n",
            "37 [D loss: 0.999910] [G loss: 1.000078]\n",
            "38 [D loss: 0.999885] [G loss: 1.000084]\n",
            "39 [D loss: 0.999906] [G loss: 1.000071]\n",
            "40 [D loss: 0.999890] [G loss: 1.000071]\n",
            "41 [D loss: 0.999898] [G loss: 1.000077]\n",
            "42 [D loss: 0.999851] [G loss: 1.000074]\n",
            "43 [D loss: 0.999895] [G loss: 1.000073]\n",
            "44 [D loss: 0.999885] [G loss: 1.000087]\n",
            "45 [D loss: 0.999905] [G loss: 1.000086]\n",
            "46 [D loss: 0.999881] [G loss: 1.000078]\n",
            "47 [D loss: 0.999891] [G loss: 1.000104]\n",
            "48 [D loss: 0.999894] [G loss: 1.000065]\n",
            "49 [D loss: 0.999888] [G loss: 1.000087]\n",
            "50 [D loss: 0.999888] [G loss: 1.000078]\n",
            "51 [D loss: 0.999897] [G loss: 1.000090]\n",
            "52 [D loss: 0.999895] [G loss: 1.000097]\n",
            "53 [D loss: 0.999888] [G loss: 1.000086]\n",
            "54 [D loss: 0.999887] [G loss: 1.000073]\n",
            "55 [D loss: 0.999904] [G loss: 1.000070]\n",
            "56 [D loss: 0.999894] [G loss: 1.000078]\n",
            "57 [D loss: 0.999893] [G loss: 1.000100]\n",
            "58 [D loss: 0.999901] [G loss: 1.000073]\n",
            "59 [D loss: 0.999894] [G loss: 1.000077]\n",
            "60 [D loss: 0.999892] [G loss: 1.000086]\n",
            "61 [D loss: 0.999887] [G loss: 1.000092]\n",
            "62 [D loss: 0.999903] [G loss: 1.000080]\n",
            "63 [D loss: 0.999904] [G loss: 1.000093]\n",
            "64 [D loss: 0.999886] [G loss: 1.000082]\n",
            "65 [D loss: 0.999905] [G loss: 1.000081]\n",
            "66 [D loss: 0.999866] [G loss: 1.000087]\n",
            "67 [D loss: 0.999879] [G loss: 1.000088]\n",
            "68 [D loss: 0.999899] [G loss: 1.000096]\n",
            "69 [D loss: 0.999887] [G loss: 1.000085]\n",
            "70 [D loss: 0.999897] [G loss: 1.000090]\n",
            "71 [D loss: 0.999897] [G loss: 1.000083]\n",
            "72 [D loss: 0.999889] [G loss: 1.000107]\n",
            "73 [D loss: 0.999906] [G loss: 1.000106]\n",
            "74 [D loss: 0.999896] [G loss: 1.000099]\n",
            "75 [D loss: 0.999900] [G loss: 1.000092]\n",
            "76 [D loss: 0.999885] [G loss: 1.000108]\n",
            "77 [D loss: 0.999899] [G loss: 1.000098]\n",
            "78 [D loss: 0.999905] [G loss: 1.000078]\n",
            "79 [D loss: 0.999884] [G loss: 1.000083]\n",
            "80 [D loss: 0.999874] [G loss: 1.000083]\n",
            "81 [D loss: 0.999897] [G loss: 1.000090]\n",
            "82 [D loss: 0.999903] [G loss: 1.000068]\n",
            "83 [D loss: 0.999894] [G loss: 1.000068]\n",
            "84 [D loss: 0.999900] [G loss: 1.000059]\n",
            "85 [D loss: 0.999898] [G loss: 1.000075]\n",
            "86 [D loss: 0.999896] [G loss: 1.000105]\n",
            "87 [D loss: 0.999920] [G loss: 1.000068]\n",
            "88 [D loss: 0.999895] [G loss: 1.000083]\n",
            "89 [D loss: 0.999890] [G loss: 1.000070]\n",
            "90 [D loss: 0.999905] [G loss: 1.000074]\n",
            "91 [D loss: 0.999901] [G loss: 1.000079]\n",
            "92 [D loss: 0.999882] [G loss: 1.000100]\n",
            "93 [D loss: 0.999903] [G loss: 1.000083]\n",
            "94 [D loss: 0.999887] [G loss: 1.000108]\n",
            "95 [D loss: 0.999896] [G loss: 1.000083]\n",
            "96 [D loss: 0.999896] [G loss: 1.000083]\n",
            "97 [D loss: 0.999899] [G loss: 1.000081]\n",
            "98 [D loss: 0.999890] [G loss: 1.000090]\n",
            "99 [D loss: 0.999893] [G loss: 1.000082]\n",
            "100 [D loss: 0.999906] [G loss: 1.000090]\n",
            "101 [D loss: 0.999879] [G loss: 1.000081]\n",
            "102 [D loss: 0.999884] [G loss: 1.000092]\n",
            "103 [D loss: 0.999876] [G loss: 1.000078]\n",
            "104 [D loss: 0.999918] [G loss: 1.000106]\n",
            "105 [D loss: 0.999884] [G loss: 1.000109]\n",
            "106 [D loss: 0.999902] [G loss: 1.000098]\n",
            "107 [D loss: 0.999907] [G loss: 1.000096]\n",
            "108 [D loss: 0.999897] [G loss: 1.000090]\n",
            "109 [D loss: 0.999895] [G loss: 1.000104]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-390051c0f42e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mwgan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_interval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-10-abf96015caee>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, epochs, batch_size, sample_interval)\u001b[0m\n\u001b[1;32m    161\u001b[0m             \u001b[0;31m# ---------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 163\u001b[0;31m             \u001b[0mg_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcombined\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_on_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    164\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    165\u001b[0m             \u001b[0;31m# Plot the progress\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics)\u001b[0m\n\u001b[1;32m   1015\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_sample_weight_modes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_weights\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1017\u001b[0;31m       \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1018\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1019\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreset_metrics\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3475\u001b[0m     fetched = self._callable_fn(*array_vals,\n\u001b[0;32m-> 3476\u001b[0;31m                                 run_metadata=self.run_metadata)\n\u001b[0m\u001b[1;32m   3477\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_fetch_callbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3478\u001b[0m     output_structure = nest.pack_sequence_as(\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m         ret = tf_session.TF_SessionRunCallable(self._session._session,\n\u001b[1;32m   1471\u001b[0m                                                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m                                                run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "74wq8cnA24s4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plotLoss(train, test):\n",
        "    iterations = list(range(len(train)))\n",
        "    plt.plot(iterations, train, label=\"Discriminator\")\n",
        "    plt.plot(iterations, test, label=\"Generator\")       \n",
        "\n",
        "    plt.xlabel(\"Number of Iterations\")\n",
        "    plt.ylabel(\"Loss\")\n",
        "    plt.grid(True, linestyle='dotted')\n",
        "    plt.legend() #loc=\"upper left\"\n",
        "\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Aof9j9Ih24s6",
        "colab_type": "code",
        "outputId": "71ccd174-9907-4431-a7a7-4e67dd055786",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "dloss = [x[0] for x in wgan.d_loss]\n",
        "gloss = [x[0] for x in wgan.g_loss]\n",
        "plotLoss(dloss, gloss)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEGCAYAAAB7DNKzAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOydd3gc1b2w31HvktUly71hy90Gg01x\n6BBqMKF9xCTUhBLgcgmkOgk3lJBcCBBK6B0uzYQaMDbFXZYtC8uyVSzLktV7Wa20u+f7Y1Zrab0q\nI81qjuXzPo8eaXdnZ985o53fnPY7mhAChUKhUCj6IsBqAYVCoVDIjQoUCoVCoegXFSgUCoVC0S8q\nUCgUCoWiX1SgUCgUCkW/BFktYDaJiYli4sSJVmsoFArFEcW2bdtqhRBJvl4bdYFi4sSJZGVlDfn9\nRUVFTJkyxUQjc1BexpDVC+R1U17GkNULhuamadr+vl5TTU9exMfHW63gE+VlDFm9QF435WUMWb3A\nfDcVKLxob2+3WsEnyssYsnqBvG7KyxiyeoH5bipQeBEQIGeRKC9jyOoF8ropL2PI6gXmu426Pgpf\ndHV1UVZWRkdHx4DbOp1OGhsbR8DKGKPVKywsjIyMDIKDg020wvT9mYmsbsrLGLJ6gfluR0WgKCsr\nIzo6mokTJ6JpWr/b2u12QkNDR8hs8IxGLyEEdXV1lJWVMWnSJFO9WltbSUxMNHWfZiGrm/Iyhqxe\nYL6bvHUnE+no6CAhIWHAIAEQFCRn7ByNXpqmkZCQMKianlFk/QKDvG7KyxiyeoH5bkdFoAAGFSQA\nOjs7/WwyNEar12DPi1HKysr8sl8zkNVNeRlDVi8w3+2oCRSDJSwszGoFnygvY0ydOtVqhT6R1U15\nGcMyr72fw+6PwOU8/DX3shFmu6lA4YXNZvPLfgMDA5k/fz6ZmZnMmzePv/3tb7hcLgCysrK47bbb\nhu311FNP8fLLLxvyWrp0qaHte/Liiy9SXFw85Pf7k127dlmt0CeyuikvYwzKq6MZsl+BDY/Bvm8g\n/xP9Qt+wH/I+hI3/hNx3YOfbkP8xdLqHtQoBrdVQsxcO7oDSTdBeDwVfwhuXw1tXwSNz4NVL4Kv/\ngeKv4YObYfUtg3czgDbaFi5avHix8J6ZvXv3bmbOnGmRkU5UVBStra0AVFdXc+WVV7Js2TL++Mc/\nmrJ/h8Mx4v0Yy5cv5+GHH2bx4sWDfo/T6SQwMLDXczKcH8VRhr0FQqP7fr2rAzoaITAEwmIhIBBc\nLmguh6BQqC2A9jqYfjYEhUD9Pj0A7P0MDmwGlwPQwNUFwjV4r6BwCIvRA4zD6+YwMAQCgiB+Cpx0\nB+z6ABpKoOp7/TOCwmHRNXD2/TCEJl1N07YJIXx+meXsIbWQtrY2IiMj/foZycnJPPPMMxx77LGs\nWrWKr7/+mocffpiPPvqIr7/+ml/+8peA3n7/zTffEB0dzZ///GfefvttAgICOOecc3jggQdYvnw5\n8+fP57vvvuOKK66gpaWFqKgo7rrrLpYvX86CBQv49ttvaWtr4+WXX+b+++8nNzeXyy67jPvuuw84\nFMDWrVvHqlWrSExM5Pvvv2fRokW8+uqraJrGn/70J/79739js9lYunQpTz/9NO+++y5ZWVlceeWV\nREREsHHjRjZs2MBdd92Fw+Hg2GOP5cknnyQ0NJSJEydy2WWX8cUXX3D33Xdz+eWX+7V8AbZt28ai\nRYv8/jlDQVa3UeElBLRU6H+314GtEVJn64+bD+oX2W/+Ct8+DAt/AktugurdsP5R6GiCeVdA0VdQ\ntuXQPsPj4fif63f8FTt6f17ceP0CXbtHf5w4Axb8PwiOAIR+cZ9+tr5d1fcQFgddNqjZDcmz9O3b\na0EL1IPQnk+hq10PYnETICIegsMhIBiK1ui1i0v+pe9v9iWHjqt0E0xerm9vtMwGwVEXKP74713k\nHWw2dZ+z0mP4w/mZht4zefJknE4n1dXVvZ5/+OGHeeKJJ1i2bBmtra2EhYXx6aef8umnn7J582Yi\nIiKor6/3bN/Z2enJbbVq1ape+woJCSErK4tHH32UCy+8kG3bthEfH8+UKVO44447SEhI6LX99u3b\n2bVrF+np6Sxbtoz169dz4okncsstt/D73/8egKuvvpqPPvqIFStW8Pjjj3tqFB0dHVxzzTWsWbOG\n6dOn85Of/IQnn3yS22+/HYCEhASys7MNldFwkPGC142sbkeclxBQ8q1+8Wyt0u+q934G9f00hwYE\n6Xf745fC9lch291UmzANYtLh6wdgzEQ45VcQmaRvu/dzWPs/EJUKZ/1Fv2jHjQeE3qQUGAyLfwbT\nz4T4yX1/dtSph/6euOzQ35Hu72HiVJh8St/vn36m7+dj0mH2j3o9Zfa5POoCxUC4XE4CAgIH3tBP\nLFu2jDvvvJOrrrqKH/3oR2RkZPDll1967tyhdx6Xyy67rM99XXDBBQDMmTOHzMxM0tLSAD1IHThw\n4LBAcdxxx5GRkQHA/PnzKSkp4cQTT2Tt2rU89NBDtLe3U19fT2ZmJueffz5wqO9kz549TJo0ienT\npwOwcuVKnnjiCU+g6M/TH8h6dwzyulnuVVsIWc/Dgqv0u+3mcnDY2ZP1NTPiuiDpGP1uPPtlCI+D\nxlI9UIB+V4+AsYvguBv15qHwMRAapQeSgCCIToOKHEieqd/1V+ZCTb5+0c84Vm9eairTt+t5DTj+\n53pfQUxar+aqbdu2seinn4xsGQ0SVaMYJkbv/P1FcXExgYGBJCcns3v3bs/z99xzDz/84Q/55JNP\nWLZsGZ9//jlAn5Pa+msm635PQEBAr/cHBATgcDj63B70zneHw0FHRwe/+MUvyMrKYty4caxatarX\nvIfw8PBBHa+/m/O8kfFC3I2sbiPi5XJB7V6oK9TvxHe9r3fwpmTCwe16u/zmp/SLdbM+xHOG9z6i\n0/Q7fSHg3Idhzgo9KPTF1NMP/T2vxw1L2lz9pyexGb73kTT9sKdkPY+gahR+p7293XPn7i9qamq4\n6aabuOWWWw6bR1BUVMScOXOYM2cOW7duJT8/nzPOOINVq1Zx1VVXeZqeRipzZXdQSExMpLW1lXfe\neYcVK1YAEB0dTU1NDQAzZsygpKSEwsJCpk6dyiuvvMIpp/RTjfYzubm5zJkzx7LP7w9Z3Ybl1VoD\npRugrRY62/R29vB46GqD3f+G0BiISoGC/4DtUNMpQeEw83y9jX/aGbD8Htj2ErQchGW/hLAYSqqa\nmbjkXL0G4OyEGefqNQQYUqetWch6HsF8NxUovPDXvACbzcb8+fPp6uoiKCiIq6++mjvvvPOw7R55\n5BHWrl1LQEAAmZmZnHPOOYSGhrJ9+3YWL15MSEgI5557Ln/5y1/84ulNXFwc119/PbNnzyY1NZVj\njz3W89o111zD7bffzr333svGjRt54YUXuPTSSz2d2TfddNOIOPqiuwlMRqRzs7fA2vuZ1VwBNVP1\nztexC/U79u2vgL0Zpp4Bxev0i3X3aKDQKL0TtiwLqnL73n/6Qj2AVOzQ9zPlB5A0A5wOSJh6qI2+\nm3Mf6vUwzW6H0NC+7/YtQrrz2AOz3dTwWC86OjqknEQ2mr38MTy2oKCAadOmmbpPs7DMzemA8iyw\nNegjaZIz4cAm+HIV1BfTFZlGcFslCCfEZEBUkt4c1JPoNL2Zx9nprjnY9Oabycth0in6xTwkUh/1\n016nNxHFpA9LW9ZzKasXDM1NDY81gKwZIZWXMVJSUqxW6BNT3YQ4vPnF5YTSjVBXpHcIN5dDU7ne\nkduz2aeb2HGw8t/Y4ucSHOyEPZ9B3mqo3gUXPA7jlui1iUkn6R3BgyUqeViH1o2s51JWLzDfTQUK\nLxwOx2ETwmRAeRmjsbGRmJgYqzV8YopbW50+ZDP7ZX3ETkwaVOfrF+f6YmjsXtVS0/sGYsfC9LNg\nxjn6KB9boz6uP2Ga3tkbGERjaSkx48fD/Cv0n5746MwdKWQ9l7J6gfluKlB4IetiJMrLGDI203XT\np1tzBVTuhGln9q4lVO2CPZ/or7dW6ekfqt0pGjJ/BNV5emBIydT7AsZMgNP/AGMX601FQSG+P2/K\nDwbnZTHKyzhmu6lAoVCMMFpnC+wv0kcGVe2Czlb9Iv/J3dBaCcff7B46+p7+hsZS/Xd4PESn6hf/\nY34Isy6ElFnWHYjiqEEFCi+6E/XJhvIyhj/WuBg2TWWw/TUSNjwGnS2HntcC9FnFMRl6ColNT+jP\nTz8bQqLguBtg/lWe9Az+QsoyQ3kNBbPdVKDwYjQuEORPZPWKi4uz7sMLvoDNT+v9Ah1NUPKdPvrH\n1gCAc/LpBCy5Xp/lmzgdAoP0XD0Zx0JEAkw5FRKm6LOMRxBLy6wflJdxzHaT81tuIV1dXX7rnK2q\nquKOO+5g06ZNjBkzhpCQEO6++24uvvjiEfdat24dISEhw0ozDv4tr+FQVVU1/M68Lps+WSwmHcYd\nr88aDonS+w9cLr0/ofBLfURQUBikztGHn+77BqLT9cRygaF6Z3FotN6pnHkxJfWuw4cuzjjn0N9z\nfzw87yFiSpn5AeVlHLPdVKDwIiSkj46/YSKE4KKLLmLlypW8/vrrAOzfv58PP/zQb179pR5ft24d\nUVFRhgKFr/35q7yGy/jx44e3g51vw39+q3ceA6ABAmLHQ/p82L9Bz/oJkDZP367wC0iaCaf+Fpbe\npk9K8zFzeHyUfXhufmLYZeYnlJdxzHZTgcKLjo4Ov6Tw+OqrrwgJCek1W3nChAnceuutOJ1O7rnn\nHtatW4fdbufmm2/mxhtv7JX6Ozc3l8WLF3tSf2/bto0777zTs4j6iy++SFpa2mGpx6dPn859991H\nZ2cnCQkJvPbaa9hsNp566ikCAwN59dVXeeyxxxg3bhw/+9nPqK2tJSkpiRdeeIHx48dzzTXXEBYW\nxvbt21m2bBl///vfR6S8hsvevXsHn8Kg+aBeC9j3jTtFtaandM44Fi5+Wm8+qvpen6S2fyOUZ+vN\nQ1NP139HJen7cXT2PcJoqG4jiPIyhqxeYL7b0RcoPr1HT0PQB0O65KXOgXMe6HeTXbt2sXDhQp+v\nPffcc8TGxrJ161bsdjvLli3jzDP1lMK+Un8vWbKEW2+9ldWrV5OUlMRbb73Fb37zG55//nmgd+rx\nhoYGNm3ahKZpPPvsszz00EP87W9/46abbvKsXQFw/vnns3LlSlauXMnzzz/PbbfdxgcffADo6+9u\n2LDBZxOTjEEC6PtLYmuAumLY97Xel1BfdKjWEB4PceP0vEUn362nmg50f0UyL9J/n9TPhw4iSPTr\nZjHKyxiyeoH5bkdfoBgAp8tJ4AikGb/55pv57rvvCAkJYcKECezcuZN33nkHgKamJgoKCggJCfGk\n/m5ra/Ok/o6Li+P777/njDPO0J2dTk8Kceid0rusrIzLLruMiooKOjs7mTRpkk+fjRs38t57+nDM\nq6++mrvvvtvz2qWXXtpnP8RILPQ0FHqlWXZ26Unk1j8Ca/6sp6gASJuvJ6JLmgmTToaU2TAC80Is\nT+fdB8rLGLJ6gUozPnwGuPP3V4jIzMzk3Xff9Tx+4oknqK2tZfHixYwfP57HHnuMs846q9d71q1b\n50n9HRkZ6Un9LYQgMzOTjRs3+vysnhfuW2+9lTvvvJMLLrjA05RllP4CgYxBAnsLi+Ka9dnH3/0v\nbPiHvpylrUGfezDnx3q/Qtw4S/RkvbgoL2PI6gXmu8k5rdZC2tra/LLfU089lY6ODp588knPc+3t\n+kLqZ511Fk8++SRdXV2A3r7o7dHz8YwZM6ipqfEEiq6urj4XU29qamLs2LEAvPTSS57no6OjaWk5\nNJZ/6dKlvPnmmwC89tprnHRSf20svr0so+BLOLDFvajNK/DYYnjlInhwol6LmHWRnpr6nL/CpS/B\nzPMsCxKg3+3JiPIyhqxeYL7b0VejGAB/3SFrmsYHH3zAHXfcwUMPPURSUhKRkZE8+OCDXHrppZSU\nlLBw4UKEECQlJXn6B3x5hYSE8M4773DbbbfR1NSEw+Hg9ttvJzPz8EWZVq1axaWXXsqYMWM49dRT\n2bdvH6D3SaxYsYLVq1fz2GOP8dhjj/HTn/6Uv/71r57O7MFgeY2iLAteW4FnfWJnJ6Qv0BeYr9gB\nqXP1hW0kQtY7UeVlDFm9wHw3lWbci5FYuGgojGavIaUZz/tQX9P4s19BazWc/N9QvRtmXQATTiQn\nN5d58+YNy8tf5OTkSOmmvIwhqxcMzU2lGTfAYJf2HGmUVw9y3oL3bzj0eMXzMPuSXpv4ql3Jgqxu\nyssYsnqB+W6qj8ILWfO3HPVeLhcUfaUvk/nRHTB+qT7H4ay/6BlUvSgsLBwZryEgq5vyMoasXmC+\nm6U1Ck3TngfOA6qFELN9vK4BjwLnAu3ANUKI7KF8lhDisPWpfSHrTOPR6jWops+ir+Dz3+jptAGi\nUuGSZ/VcSn2QkSHXspk9kdVNeRlDVi8w383qGsWLwNn9vH4OMM39cwPwZD/b9klYWBh1dXWDuig5\nHI6hfITfGY1eQgjq6ur6zp3vdOipt1+5GBwd8KNn4bYdcNv2foMEQG1t7ZC9/I2sbsrLGLJ6gflu\nltYohBDfaJo2sZ9NLgReFvoVfpOmaXGapqUJISqMfE5GRgZlZWXU1NQMuK3T6ZQyyd1o9QoLC+t9\n9yME7F8P8VPgi99B7v/Bkp/rC/EED74/JCoqashO/kZWN+VlDFm9wHw3q2sUAzEWONDjcZn7uV5o\nmnaDpmlZmqZlVVRUUFtbS0VFBeXl5TQ0NFBaWkpqaipCCGbMmIHNZmPmzJm0t7czc+ZMbDYbM2bM\nQAhBVFQUISEhpKamEhMTQ1xcHElJSYSHhzNu3Dg0TWPatGl0dnb22kf3b4fDweTJkwkKCmLs2LFE\nRkaSkJBAQkICkZGRjB07lqCgICZPnozD4fC5j87OTqZNm4amaYwbN47w8HCCg4OJi4sjJiaG1NRU\nQkJCmDhx4qCOaeLEiX47JpfLNeRjSkpKIiwsjOrqahoaGigqKqJr3V/hxR/C34/Rg8Rpf2Bb8qUQ\nHE52djYul4u8vDxsNhtFRUU0NDRQXl5O93kvKSmhtbWVkpISHA4HOTk5wKFx5d2/c3NzsdvtFBQU\n0NzcTGlpKdXV1VRXV1NaWkpzczMFBQXY7XZyc3N97iMnJweHw0F+fr7nM73/94qKirDZbOTl5eFy\nucjOzqarq8uzDyPHlJ+f79dj6urqGvIx9dyX2cfU3t5uyXny5zFZ9b/X3zH1h+XDY901io/66KP4\nCHhACPGd+/Ea4FdCiCzvbbvxNTzWCOXl5Z4JajIxqr1aq+Hbv+mL92z5lz4hLm2+vlDP4p9Z5+Un\nZHVTXsaQ1QuG5nYkD48tB3pOoc1wP+c3ZJyrAKPYy+mAd36mp+0GyFgMFz8DIcPbr6zlBfK6KS9j\nyOoF5rvJ3vT0IfATTed4oMlo/4RR6uvr/bn7ITOqvCpyYN0DsPoWeO0SKPkWLnwcflMJ134x7CAx\nZK8RQlY35WUMWb3AfDerh8e+ASwHEjVNKwP+AAQDCCGeAj5BHxpbiD489qf+dkpPT/f3RwyJUeNl\na4QXzwN7i77iW1AInPRfMP9Ka71GEFndlJcxZPUC890srVEIIa4QQqQJIYKFEBlCiOeEEE+5gwRC\n52YhxBQhxJz++ibMojsXkmwc8V4upz6iacu/wN4MN6yDu/bA7blw2u+t87IAWd2UlzFk9QLz3Szv\nzDab4XZmu1wuAkZgTQKjHNFe+zfAO9dCVDI0lur9EFf9n/VeFiGrm/IyhqxeMDS3/jqz5TxKC9mx\nY4fVCj45Yr32fq43NQWHQXsd2OrhpLus97IQWd2UlzFk9QLz3VSNQuE/hICnTtJnVV//lZ4GvGEf\nJBvMFKtQKPyOqlEYQNbFSI5Ir8I1UJULJ94BYTF6rWKEgoSs5QXyuikvY8jqBea7qRqFwnyE0BP4\nffBzaKvV8zMFyZnUUKFQ6KgahQG6p7nLxhHh1dEE/1wKf4yDJ5dCdT6c/kdLgoSs5QXyuikvY8jq\nBea7qRqFF7KOZDgivL74g75G9bJfQuw4fTGhiHjrvSRDVjflZQxZvUCNevI7+fn5Viv4RHqvxlLY\n9CTMvRzO+BMcd71lQaKXl4TI6qa8jCGrF5jvpgKFF5MmTbJawSfSek2cCBseg2eWgxYAp/3OaiVA\n3vICed2UlzFk9QLz3VSg8OLgwYNWK/hEVq+Wb56A//wW0ubBTz+BWDlW/ZK1vEBeN+VlDFm9wHw3\n2bPHjjjx8dY1l/SHlF71xSRt+ztMOgWuehckaq+VsrzcyOqmvIwhqxeY7ybPN1sS2tvbrVbwiZRe\nH/8XQguEi/4pVZAAScvLjaxuyssYsnqB+W5yfbslQNZRDNJ5FX4JRV/RsugWaZqbeiJdefVAVjfl\nZQxZvcB8N3mP1CKCg4OtVvCJVF6NB+Dz38KYSXTN/4nVNj6Rqry8kNVNeRlDVi8w300FCi9aW1ut\nVvCJNF7fPQKPzoXaPXD2/bTaOq028ok05eUDWd2UlzFk9QLz3VRntheJiYlWK/hECq+WSlh3P0w5\nDc77O8SNJ1HSL4sU5dUHsropL2PI6gXmu6kahRdlZWVWK/hECq/1j4KzC859COLGA5J4+UBWL5DX\nTXkZQ1YvMN9NpfDwwuFwEBQkX0XLcq+mMnhskZ6W46J/yuPVB7J6gbxuyssYsnrB0NxUCg8D7Nq1\ny2oFn1jq5XLBB78ALRBOubvXS6q8jCOrm/IyhqxeYL6bqlEoBmbTk/DZPXD+o7DoGqttFAqFH1A1\nCgPIuhiJZV4NJfDlH2H62bBw5WEvq/IyjqxuyssYsnqBWrhoQFSNwkSEgNdWQOkmuHmzlBPrFAqF\nOagahQFkvUuwxGvPp/oM7FN/12eQUOVlHFndlJcxZPUCVaMYEFWjMAkh4OmTwN4Kt2RBoJyjOxQK\nhTmoGoUBcnNzrVbwyYh77fkEKnP1UU79BAlVXsaR1U15GUNWLzDfTdUovLDb7YSGhppoZA4j7vWv\n08BWDzdv7TdQqPIyjqxuyssYsnrB0NxUjcIApaWlViv4ZES9qvOhPAuOvW7AJidVXsaR1U15GUNW\nLzDfTQUKL1JSUqxW8MmIeuW8rk+um3PpgJuq8jKOrG7KyxiyeoH5bipQeNHY2Gi1gk9GzMvlhJ1v\nw7QzISp5wM2P+vIaArK6KS9jyOoF5rupQOFFWFiY1Qo+GTGvwjXQUgHzrxjU5kd9eQ0BWd2UlzFk\n9QLz3VSgUPRm0z8hOg2mn2O1iUKhkAQVKLzo6OiwWsEnI+JVtQuK18JxN0BQyKDeclSX1xCR1U15\nGUNWLzDfTQUKL+Li4qxW8MmIeG38JwRHGEr8d1SX1xCR1U15GUNWLzDfTQUKL6qqqqxW8InfvTrb\nYdd7MPfHEBE/6LcdteU1DGR1U17GkNULzHezNFBomna2pml7NE0r1DTtHh+vX6NpWo2maTvcP9f5\n22n8+PH+/ogh4XevojXQ1Q6ZFxt621FbXsNAVjflZQxZvcB8N8sChaZpgcATwDnALOAKTdNm+dj0\nLSHEfPfPs/722rt3r78/Ykj43Wv3vyF8DExYZuhtR215DQNZ3ZSXMWT1AvPdLEvhoWnaCcAqIcRZ\n7sf3Aggh7u+xzTXAYiHELYPdr0oKOAQcnfDXqTDzfLjoCattFAqFBciawmMscKDH4zL3c95comna\nTk3T3tE0bZyvHWmadoOmaVmapmVVVFRQW1tLRUUF5eXlNDQ0UFRUhM1mIy8vD5fLRXZ2NnAoFW92\ndjYul4u8vDw2b95MUVERDQ0NlJeX072/kpISWltbyc/Px+FwkJOT02sf3b9zc3Ox2+0UFBTQ3NxM\naWkp1dXVVFdXU1paSnNzMwUFBdjtdk/iLu995OTk4HA4yM/Pp7W1lZKSEjZs2DDkY7LZbP0eU9na\n58DeRHHYbMPH9M033wz5mIZzngY6prVr11pyngZzTNu2bRvSMfn7f2/btm0jfp4Gc0xbtmyx5DwN\ndEwbN26U6hrR85g2btxo+Jj6w8oaxQrgbCHEde7HVwNLetYeNE1LAFqFEHZN024ELhNCnNrfflWN\nwiCt1fDkMr3Z6aZvIUjOJGcKhcK/yFqjKAd61hAy3M95EELUCSHs7ofPAov8LSXrYiR+8/rwVrA3\nw6UvDilIHHXlZQKyuikvY8jqBaNo4SJN04KAvcBp6AFiK3ClEGJXj23ShBAV7r8vBn4lhDi+v/2q\nGoUBmg/C32fC8nth+WGDzhQKxVGElDUKIYQDuAX4HNgNvC2E2KVp2p80TbvAvdltmqbt0jQtB7gN\nuMbfXt3tirLhF6/8j/XfmT8a8i6OqvIyCVndlJcxZPUC893UwkVeOBwOgoLkW/bTL14vX6jXKm7Z\nOuRdHFXlZRKyuikvY8jqBUNzk7JGISuFhYVWK/jEdC9bA5R8B8ecN6zdHDXlZSKyuikvY8jqBea7\nqUDhRUZGhtUKPjHdK/9jcDmGHSiOmvIyEVndlJcxZPUC891UoPCitrbWagWfmOrlcsL6RyF5FqQv\nGNaujoryMhlZ3ZSXMWT1AvPd5Gxgs5CoqCirFXxiqteu96F2L1z6EgQM717hqCgvk5HVTXkZQ1Yv\nMN9N1Si86OrqslrBJ6Z5uVzw9YN6bWLmBQNvPwCjvrz8gKxuyssYsnqB+W4qUHjhcrmsVvCJaV57\nP9NrEyf917BrE3AUlJcfkNVNeRlDVi8w300FCi8iIiKsVvCJaV4bH4fY8TDrIlN2N+rLyw/I6qa8\njCGrF5jvpgKFF/X19VYr+MQUr/JtsH89HH8TBJrTPTWqy8tPyOqmvIwhqxeY76YChRfp6elWK/jE\nFK8Nj0NoDCy4evj7cjOqy8tPyOqmvIwhqxeY76YChRf79u2zWsEnw/ZqLIW81bBoJYTFmCPFKC4v\nPyKrm/IyhqxeYL6bSuHhhcvlIsCETl6zGbbXZ7+GLU/DL3Mg1rzJOKO2vPyIrG7KyxiyesHQ3FQK\nDwPs2LHDagWfDMvL1gjZL+nJ/0wMEjBKy8vPyOqmvIwhqxeY76ZqFEcD6x+FL34PN34DafOstlEo\nFBIy7BqFpmlTNE0Ldf+9XA3F2CkAACAASURBVNO02zRNizNTUhZkXYxkyF7OLtj8NEw8yS9BYtSV\n1wggq5vyMoasXmDRwkWapu0AFgMTgU+A1UCmEOJcU21MQNUovNj5Nrx3PVz5Nkw/y2obhUIhKWb0\nUbjcCw1dDDwmhPhvIM0sQZnoXoBcNobstfVZSJgKU88wV8jNqCuvEUBWN+VlDFm9wHy3wdYoNgOP\nAL8BzhdC7NM07XshxGxTbUxAjXrqQVUePHkCnHkfLL1VHq8RQFYvkNdNeRlDVi+wbtTTT4ETgP9x\nB4lJwCuGLI4Q8vPzrVbwyZC8sl+CwBCYd6X5Qm5GVXmNELK6KS9jyOoF5rsZHvWkadoYYJwQYqep\nJiYx3BqFzWYjPDzcRCNzMOzV0QyPzIEpp8KlL8jjNULI6gXyuikvY8jqBUNzM2PU0zpN02I0TYsH\nsoF/aZr2d0MWRwgHDx60WsEnhr2+/APYm2HpLf4RcjNqymsEkdVNeRlDVi8w322wTU+xQohm4EfA\ny0KIJcDppppIQnx8vNUKPjHkte8byHoejv8FjF3kPylGSXmNMLK6KS9jyOoF5rsNNlAEaZqWBvwY\n+MhUA8lob2+3WsEng/YSAv7zO4ibAD/4jX+lGAXlZQGyuikvY8jqBea7DTZQ/An4HCgSQmzVNG0y\nUGCqiSTIOoph0F77voaKHXDSnRDi/3z5R3x5WYCsbsrLGLJ6gflug1qUQAjxf8D/9XhcDFxiqokk\nBAcHW63gk0F7ffcIRKXA3Mv9K+TmiC8vC5DVTXkZQ1YvMN9tsJ3ZGZqmva9pWrX7511N08zNLicJ\nra2tViv4ZFBeZVlQvBaO/zkEh/lfiiO8vCxCVjflZQxZvcB8t8HWT14APgTS3T//dj836khMTLRa\nwSeD8lrzR4hIhGOv87+QmyO6vCxCVjflZQxZvcB8t8EGiiQhxAtCCIf750UgyVQTSSgrK7NawScD\nehWt1Uc7nXwXhEaPjBRHcHlZiKxuyssYsnqB+W6DTeGxBr0G8Yb7qSuAnwohTjPVxgSGO+HO4XAQ\nFGTOetJm0q+X0wH/Wq6vO3HrNggKlcPLQmT1AnndlJcxZPWCobmZkcLjZ+hDYyuBCmAFcI0hiyOE\nXbt2Wa3gk369sp6Hylw9p9MIBgk4QsvLYmR1U17GkNULzHcb8sJFmqbdLoR4xFQbEzjq0oy3VMLj\nx8HYhXD1+6BpVhspFIojEH8thXrnMN4rLbIuRuLTy+WC924AVxec+7AlQeKIKi9JkNVNeRlDVi+w\naOEin2/UtANCiHGm2pjAUVWjWPcArLsfLngMFv7EahuFQnEE468axehabNuNrHcJh3l987AeJOZe\nBguutkaKI6i8JEJWN+VlDFm9YIRrFJqmteA7IGhAuBBCui7/UV+jcHbBZ/foK9fN+TFc9CQESnca\nFArFEcaQaxRCiGghRIyPn2gZg4QZ5ObmWq3gk9zcXH3m9fNn60HihFvg4qcsDxJSl5ekyOqmvIwh\nqxeY7zbkPgpTPlzTzgYeBQKBZ4UQD3i9Hgq8DCwC6oDLhBAl/e1zuDUKu91OaOjIDjEdkLoinGvu\nIzDvPYhMhrPvhzkrrLYCJC0v5PUCed2UlzFk9YKhufmrj2JYaJoWCDwBnAPMAq7QNG2W12bXAg1C\niKnA/wIP+stHCEF7p4M9RSXYOp10dOk/doeTToeLLqcLh9OF0yVwuX+GFWRdLr0ZqasDOtv0Fena\n66G2AIq/hu2vwb9/CY/Oh8cWou35GE66C27LliZIAJSWllqt4BNZvUBeN+VlDFm9wHw3K9stjgMK\n3Zlo0TTtTeBCIK/HNhcCq9x/vwM8rmmaJvxQDaqvq+bAP85GAwoQaAgCEGiAhgDP40PP9fwJ1FwE\nIgjARaD7J8Drd/ffQZprcFKhMTBhGSy5kbZxpxI9dobZhz1sUlJSrFbwiaxeIK+b8jKGrF5gvpuV\nCdXHAgd6PC5zP+dzGyGEA2gCErx3pGnaDZqmZWmallVRUUFtbS0VFRWUl5fT0NBAUVERNpuNvLw8\nXC4X2dnZwKGRAdnZ2YQGBRIVHU9kTALhsUlExKcTEjeWoDEZBMaPh7gJaAlT6YqdiEiaQXvMZBzJ\ns2mKnoY9eR41UZk0JC/hQMwiDiafTEHcSRQmncH38WeSk3geWUkXsSHhEr5LvpKPYy7n4/iVPB1w\nGQ91Xcb9XVfwoOv/8VnSdXx5zJ95KP7PtF2/kfwLP6X1gmcpST2HA01Ow8fkcrnIy8vDZrNRVFRE\nQ0MD5eXldJdRSUkJra2t5Ofn43A4yMnJ6bWP7t+5ubnY7XYKCgpobm6mtLSU6upqqqurKSoqorm5\nmYKCAux2u6dt1HsfOTk5OBwO8vPzaW1tpaSkZEjnabDHtHv37iEfU2lpqV+PqbGxccTP02COqbGx\nccTP02COqaamxpLzNNAxlZeXW3KeBnNM5eXlho+pPyzro9A0bQVwthDiOvfjq4ElQohbemzzvXub\nMvfjIvc2tX3td7h9FNXV1SQnJw/5/UYQQpBT1kRpfTvvZZexbk+N57UbT5nMvefMtMTLCMrLOLK6\nKS9jyOoFQ3Prr4/CyqancqDnhL0M93O+tinTNC0IiEXv1B4VaJrG/HFxzB8Xx/lz09hYXEdiVCjP\nf7ePf31TjMMpcAnBr84+xmpVhUJxFGNloNgKTNM0bRJ6QLgcuNJrmw+BlcBG9ESEX/mjf6InHR0d\n/tx9n2iaxtIpeg75X/9wJt8W1PLShhIcLoGGxjXzoizxGgirymsgZPUCed2UlzFk9QLz3SwLFEII\nh6Zpt6CvxR0IPC+E2KVp2p+ALCHEh8BzwCuaphUC9ejBxK/ExcX5+yMGJCYsmDX/dQoBmsafP8rj\n+fX76LCnE7GzlVtOnUpcRIjVih5kKC9fyOoF8ropL2PI6gXmu1k6W0sI8Qnwiddzv+/xdwdw6Ug6\nVVVVERMTM5If6ZOw4EAA7j33GDYU1fLmtoNomkbW/gZWXZBJcU0rF84fS2CAtdliZSkvb2T1Annd\nlJcxZPUC890snXDnD0bjhLtOhwu73c6GkiZ+/uo2XO5T9s+rFnLunDRL3WQsL5DXC+R1U17GkNUL\nRtGEO1nZu3ev1QqHERIUQElxIWdlpvLCT4/joRVziYsIZs3uaqvVpCwvkNcL5HVTXsaQ1QvMd1M1\niiOU29/czrcFtWz5zemWNz8pFIojH1WjMICsqYO9vU6dmUJdWyc5ZY0WGekcKeUlE7K6KS9jyOoF\nEi1cJCtHS42iqb2Lhfd9wQXz0vnhnDROnp5ESJCK+wqFYmioGoUBZL1L8PaKjQjmhMkJvL+9nOte\nzmLl81toau+y3EsWZPUCed2UlzFk9QJVoxiQo6VGAdBk62J/XRt5B5v53ervWTIpgVevW2K1lkKh\nOAJRNQoDdCfykg1fXrHhwczNiOPy48bzs2WT2LyvDrvDabmXDMjqBfK6KS9jyOoF5rupQOFFZmam\n1Qo+Gchr3rg4upyCPZUtI2Skc6SWl5XI6qa8jCGrF5jvpgKFF4WFhVYr+GQgrzljYwHYWdY0Ejoe\njtTyshJZ3ZSXMWT1AvPdVKDwIiMjw2oFnwzklTEmnLiIYHLLmnh/exm/X/398FbgM8nLKmT1Annd\nlJcxZPUC891UoPCitrbPpS4sZSAvTdOYMzaWrP31/M/H+by8cT9fjsDM7SO1vKxEVjflZQxZvcB8\nNxUovIiKkjOd92C85mbEUlTTRm2rnTERwfzlk910Oga57KofvaxAVi+Q1015GUNWLzDfTQUKL7q6\nRn4uwmAYjFd3P8XssTE8fOk89tW28cYW/y4AfySXl1XI6qa8jCGrF5jvpgKFFy6Xf+/Ah8pgvBZN\niCc2PJhfnjadU49J5rhJ8Ty+thBbp/+GzB7J5WUVsropL2PI6gXmu6lA4UVERITVCj4ZjFdSdCg7\nfn8GZ8xKQdM0/vusGdS02Hl5Y4mlXlYgqxfI66a8jCGrF5jvpgKFF/X19VYr+GSwXpp2KJPssRPj\nOWV6Ek+sLaS80Wap10gjqxfI66a8jCGrF5jvpgKFF+np6VYr+GSoXqsuyMQl4NbXs+lyml9VHm3l\nNRLI6qa8jCGrF5jvpgKFF/v27bNawSdD9ZqUGMkDl8whu7SRCx5fz+e7KqXw8jeyeoG8bsrLGLJ6\ngfluKimgFy6Xi4AA+eLncL1W7yjnH2sKKKppY/XNy5g3zpzF10drefkTWd2UlzFk9YKhuamkgAbY\nsWOH1Qo+Ga7XhfPH8sHNy0iMCuHPH+WZNmt7tJaXP5HVTXkZQ1YvMN9N1SiOMt7YUsq97+Xy+JUL\nOG+uvG2sCoViZFE1CgPIuhiJWV4/XjyOY1Kjuf+TfDq6hj+/YrSXlz+Q1U15GUNWL1ALFw2IqlEM\nzIbCWq58djM3njyZCQmRHDcpnqnJ8qYjUCgU/kfVKAyQnZ1ttYJPzPRaOjWR02em8PQ3xfz6/Vx+\n98H3UniZiaxeIK+b8jKGrF5gvpuqUXgh60gGs72qWzr4NLeS4ppWXtq4n2/v/gHj4o3P5jxaystM\nZHVTXsaQ1QvUqCe/k5+fb7WCT8z2So4OY+XSidxwyhQ0Dd7ZVkaTrctwv8XRUl5mIqub8jKGrF5g\nvpuqUXhhs9kIDw830cgc/On1/57dTM6BRuwOF2dmpvD4lQul8BoOsnqBvG7KyxiyesHQ3FSNwgAH\nDx60WsEn/vT66bKJOIVgYmIEn31fSV2rXQqv4SCrF8jrpryMIasXmO8WZOreRgHx8fFWK/jEn16n\nzUwh709ns6eyhbMe+YYPdhyko8tJUnQoP148zjKv4SCrF8jrpryMIasXmO+mahRetLe3W63gk5Hw\nmpEazdyMWP76eT5//XwPv/3gew4OkHX2aC6voSKrm/IyhqxeYL6bChReyDqKYaS8Ll2UQUeXiwvm\n6bO2//eLvf1uf7SX11CQ1U15GUNWLzDfTTU9eREcHGy1gk9GyuvKJROYkhzF8ZMSuP/T3Tz33T5u\nOHky01KiLfUyiqxeIK+b8jKGrF5gvpu8IdEiWltbrVbwyUh5BQZoLJ2SSECAxs+XTyU0KJAn1xVZ\n7mUUWb1AXjflZQxZvcB8N0sChaZp8ZqmfaFpWoH795g+tnNqmrbD/fPhSLglJiaOxMcYxgqv+MgQ\nrlwyntU5B3l9cykXPbGefbVtg/Za+fwWVu8o97emT2Q9jyCvm/IyhqxeYL6bVTWKe4A1QohpwBr3\nY1/YhBDz3T8XjIRYWVnZSHyMYazyuv6kyQRo8Ov3c9lxoJE1u6sG5dXY3snXe2v4rqB2JDQPQ9bz\nCPK6KS9jyOoF5rtZFSguBF5y//0ScJFFHocxdepUqxV8YpVXamwY/33WDK4+fgIpMaHkljcNymt/\nnT7qorK5w++OvpD1PIK8bsrLGLJ6gfluVgWKFCFEhfvvSiClj+3CNE3L0jRtk6ZpfQYTTdNucG+X\nVVFRQW1tLRUVFZSXl9PQ0EBRURE2m428vDxcLpcnYVZ3Kt7s7GxcLhd5eXnk5ORQVFREQ0MD5eXl\ndO+vpKSE1tZW8vPzcTgc5OTk9NpH9+/c3FzsdjsFBQU0NzdTWlpKdXU11dXVlJaW0tzcTEFBAXa7\nndzcXJ/7yMnJweFwkJ+fT2trKyUlJWzbtm3Ix2Sz2YZ1TCeMaee350xjSlwQOaUNlOzfz/Nr89hX\nVsHmzZt9HtO6LD3R4L6qxj6PaTjnaaBjWr9+vSXnaTDHtGvXLr+cp+Ee065du0b8PA3mmHbu3GnJ\neRromLKzs6W6RvQ8puzsbMPH1B9+S+GhadqXQKqPl34DvCSEiOuxbYMQ4rB+Ck3TxgohyjVNmwx8\nBZwmhOi7ZxWVZtyf/GNNAf/75V6evGohN72aza/OPoafL5/ic9vH1hTwty/2Eh0aRO4fzxphU4VC\nYRRLUngIIU4XQsz28bMaqNI0Lc0tlwZU97GPcvfvYmAdsMBfvt3IuhiJDF6zx8YgBDz42R4A1uZX\n9+lV4m56arE7aLU7RsyxGxnKqy9kdVNexpDVC8x3s6rp6UNgpfvvlcBq7w00TRujaVqo++9EYBmQ\n52+xRYsW+fsjhoQMXrPHxgKwr7aNkKAAtpU2MGXmHJ/bltYfGh1V2TTy/RQylFdfyOqmvIwhqxeY\n72ZVoHgAOEPTtALgdPdjNE1brGnas+5tZgJZmqblAGuBB4QQfg8Ust4lyOCVHB1GSkwoAL88bRpO\nl+DFz7f43Lakrp3x7vUtqizo0JahvPpCVjflZQxZvWCU1CiEEHVCiNOEENPcTVT17uezhBDXuf/e\nIISYI4SY5/793Ei4yXqXIIvXwvFjGBsXzg0nTyY+MoQSe+Rh27TZHdS02FkySU9MVjFAjUIIwYbC\nWszsL5OlvHwhq5vyMoasXjB6ahTS0j3KQDZk8brvotm8fdMJBAcGcMr0JL7aXXnYBb60Xu+fWDI5\nARi4RvH+9nKufHYzW0saTPOUpbx8Iaub8jKGrF5gvpsKFF5Mnz7dagWfyOKVEBXK2Dh9QZQlk+Jp\ntrsorm1DCOEJGPvr9P6JGSnRxEUEU9HU/9C7VzftB6Cs4VDGy5aOLurbOofsKUt5+UJWt4G83ssu\n4+2sAyNkc4gjtbysxGw3FSi8KC0ttVrBJzJ6LZ6oNy1lldTzz3VFLH94HU6XoKhGDxTjEyJIjQmj\nsqnvhZDyDjaTXarPtahqPrTdr97dycrnffd/DAYZy6sbWd368+rocrLqw108/92+ETTSORLLy2rM\ndlPZY71ISelr7p+1yOg1JSmSMeFBbN5Xz6aiOg42dZBd2sA3e2uYnhJFbHgwqbFhVDbrNQohBDUt\ndpJjwjz7eG3zfkKDAtC0Q01UdoeTdXtq6HK6cLoEgQGaYTcZy6sbWd368/p8VyXNHQ5CWvVaXkWT\njTa7g6nJvrMKj5SXlcjqBea7qRqFF42NjVYr+ERGL03TmJ0awUc7Kzjo7rB+a+sBtpbUc1amPtcy\nLfZQjeLDnIMse/ArDtQfamL6Kr+a02emMDYu3BMoskoaaO900uUUlDf032zlCyEEpZXW5JgaDDKe\nS+jf662tepNTfZsdl0tw38e7ufm17ZZ7WYmsXmC+mwoUXoSFhQ28kQXI6rVwXCydDhcRIYEcO3EM\n72wrwyXgzFl6oEiJCaO21Y7d4eSLvCq6nILvCvWLeEWTjYqmDhZPHENKTJgnUKzbc2j+ZXGt8XTJ\nn+RWcvFL+VRblGdqIGQ9l315HahvZ0NRHWmxYbgENNq6KGuwDdj35G8vq5HVC8x3U4FCMSzmjY0C\n4MxZKZ5V8cbGhTN7bAwAmen6JL31hbVsKKoD8Pze4e6bWDB+DKkxYZ4+iq/31nBMqt6k4Z3WfDCs\nydcD0t4q/64XIISgzYJZ5yNNfmULAD+ckwZAXaudmuYOmjscdDldVqopRggVKLzo6JDzLlRWr4mx\ngVxx3HhuWj6F02bq7aJnzEpB0/R+hVOmJxEXEcyDn+6hvq2TmLAgNhbpcyaySxsICQpgVloMyTFh\nVLd0UN5oY29VK5cszCAmLIjiGmOBQgjBJncgKqkzHmSMsG5PDYvu+8LwzHNZz2VfXnWtegA/Jk0P\n/jUtdqpb9Oca2oc+Mm24XlYjqxeY76YChRdxcXEDb2QBsnolxo/h/h/N4ZjUGNLjwnn9uiXccfqh\noXkhQQGcNzeNPVX6XemNp0yhtrWTvVWtbC9tZHZ6DCFBAaTEhNLlFHyZp693ccKUBCYlRRmuURyo\nt3n6S/b7KVA43HfRe6ta6OhysXlfnaH3y3ou+/Kqcw9Tnp6i1x4LqltxuPSh0MMZwjxcL6uR1QvM\nd1OBwouqqqqBN7KAI8Vr6dREYiN6r9d78YIMQJ9XceF8vXlq7Z5qcsubWDheTxqc6h4J9UVeFSFB\nAcxIjWZyYqThQLGxWO//iAgO8CQmNJP/yzrAovu+pL1Tn30Oeue7EY6Uc9lNTYudqNAgz/yZvIPN\nntfqW/0fKI608pIBs91UoPBi/PjxViv45Ej2Wjg+juMmxXPxwrFkjIlgRko0D3yaj93hYoE7UHQP\nmd1UXEdmegzBgQFMSoykvNFGR5dz0D6biutJjArhhCkJlAyhf2MgXt64nyZbFwcbbdS6m2S27TcW\nKI60c1nX1kliVAhjIkII0CCvokegGIGmpyOtvGTAbDcVKLzYu3ev1Qo+OZK9NE3j7RtP4KZT9LUr\nXr72OG75wVSWTU1g2VQ9zUd3skGHSzAvQ682T0rU80gZ6WvYsq+eJZMSiNE62F/fjstlXv6ovVUt\nnhX+Kpvs1LgDRX5ls6FU6kfauaxrtZMQFUpAgEZ8ZKinGRFGpunpSCsvGTDbTQUKL+bM8Z0222pG\nk1dKTBh3nTWD1647nriIEEDPTNvN3Ax9pFR3oPjbf/ZS0OPi1E1JbRtvbjk0A7XJ1kV5o43ZY2NZ\nfMwEOh0uU5difTf70DrElc0d1LZ0Eh0WhEvAfR/lseQvX3L/J7tpGODieaSdy7rWThIi9fOUGBVC\np8PV6zWrvKxGVi8w300FCi9kTR082r1CggI8F6N54/QaRWZ6DDeeMpkNhbVc/symXheoToeLm17d\nxj3v5bLXHUQKq/Xf01Oi6KwrB8wb+SSEYPX2g54aUFVzB7WtdpbPSEbT4M2tBwgNCuRf3xbz2w++\n73dfR9q5rG21kxit1/gSovRzFBcRTGx48LBGPb22eT9r9/hcs2xQXlazbds2bn1juydXmUyMijTj\nMiNr6uCjwSslJozo0CAmJeg1CU3TuPecmTx6+QLq2jpZX1jL13truP3N7fzq3Z3kV7agaYfu9PdU\n6vMmpqdEc8YJ8wHY36NDu6Gtk9+8n0uTrYtWu4P/ejtn0ENbS+vbqWzu4Nw5acSEBVHeaKO+vZNJ\niZEsn57E6TOT+fz2kzkrM5Xdlc397svsc7mvto09lYfXuIziy8vpEtS3d5LoDuIJkXrASIkOIyEy\nxDMiyihOl+D+T/J5aUPJkLxkYNGiRXyZV8UXeeZ1HHd0OU1pLlVpxv2MzHcvMmKm1wlTEjh3ThoB\nXrmdTpqeSExYEO9ml/Hr93JZnXOQ97eXc+H8dE6dkcwH28txugR7q1qICAlkbFw4B4vyCAkM6NWh\n/fqWUl7bXMp/dlWybk8172aX8frm3neDQghe3lhyWGr07e7JgQvHjyE1Noy8g80IAUnRoTx/zbE8\nu/JYwkMCGRcfQXmDrd+1Ncw+l3e8tYMVT26gqKb/CYYul+Cypzf2eWHz5dXQ3okQetZggET37+SY\nUMZEhgx51FNRTSutdsegArWs//sbNmdh63IOWO6DxeF0ceKDX/Hm1uFn6FU1Cj8j892LjJjp9bvz\nZvHgirmHPR8aFMhZmal8tLOC8kYbL/70OD669UQevGQuP1qYQVWznQ1FtRRUtzAtOYqAAI3jFi9m\nZnoMr28uZe2eaoQQnprHpuJ6NhfXA/BxbgUul+DfOQdpszvYU9XC71fv4uHP9/RyyC5tIDIkkOkp\n0aTEhLHbPfInKSrEM7kQIGNMOHaHy9PR7Qszy6yxvZOcskZa7A6ufzmr30712lY7m/fV81W+70Dh\ny6u7D6I7QHQ3PSVHhxEfGTLkzuzuWfndE/f6o9urrtXuaV4cKr/74Hse/Cx/WPvoZsKMTADDI/P6\norrFTm1rp+d/azioGoWfycnJsVrBJ0e71/nu9CAnTE7g5GmJzB4bS1hwIKfNTCY2PJjXNpWyp7KV\n6SnRHq9/XrWQcfERXPviVu77eDfFNW1EhASyeV8dm/fVERSgUVTTxu9Wf8+tb2zn9c2lnsWTVucc\n9MxIBr1GMW9cHIEBGikxYdjd/SXdF9BuMsbocw26kxlWNnVw6t/WsePAoSRtZpbZxqI6hIDbTptG\ncU0bn39f2ee23SsNFlb7vgP25dU9BLg7QCR2B4qYUBIiQ4Y8PHb7Ab2c69s6sTv6v8h2ez302R6u\n/NfmIX1eN5/tqmR9oTkJIzdt1/uihDCnL6y7FmvG0sFmfy9VoPAiMzPTagWfHO1eS6ckcO2Jk/jT\nhZm97uDDggO5+vgJfJ5XSW2r3RMoMjMzGRsXzjs/P4HjJyfw3Hf7CAsO4KZTplDWoKcJufqECQRo\n8NpmfeTUur3VbN1XT2RIIJ0Ol6cJwNbpZHdFMwvG653sqT3SpCdFewcKfZ3wMneg+HJ3FcU1bfxj\nTYFnGzPL7NvCWqJCg7j5B1OIDAkkp6zvrKHdI8CK+kiL4surO1B0B4hDfRShxEeG0NDWaWgJ27V7\nqimsbvU05QFUN/dfq+j22l3ZTHWLvVcA70l+ZTNN7V197qfJ1kVNi90zUXK4jEkd5/nbO9WMrdNp\nuJbhCRQm+Jn9vVSBwovCwkKrFXxytHsFBQbwu/NmMS3l8PUPVi6dSHCg/q88zZ1motsrIiSI51Ye\nyw/npHHdiZM5bWay533nzU3j+MkJRIcGccG8dLbsq2dDUR3Lj0lm2dQEXtu0H6dLkFvehMMlWDBO\nnxyYEnsoUHjXKLpnL3cHiu6716/yqz2js/YWFLC7opk3tpTyxNpCPtp5cMjl8l1BLcdPTiA0KJA5\nGbHklDX1er2jy8nK57ewbX+9pz+gvq3TZ5ORr3Pp3fSU6j729Lhw4iNDcLgEzbbBzSH5vryJa1/c\nyuXPbGRvVQvz3aPbBhrCXFhYiBCCIndNqMBHjcjhdHHJPzfw+NqCw17rptjdl1Dbaj+sw7jL6cLW\naezCvrv4UF9CkZfT9S9ncesbxtKwd58fM7Iem/29VAsXeZGRkWG1gk+UV98kRYdyycIM3thSygx3\n1tmeXuEhgTxx1UJAH20TExaE3eFiztg4/v7j+bTau6hutvNhzkFqW+0cO2EMSdFh3Px6NhuKaj13\nv901ihR3LSIiJJDI0N5focjQIMZEBFPW0I7TJdhYXMfpM1NYX1jLPe/u5LhJCXyUc5CyxuJe72uy\ndXHVkgmGjru0rp3SanFOpQAAG9lJREFU+nauPXESoA8rfuG7EuwOJ6FBgYA+a/zrvTXMSo+h541/\nYXUrx02K77U/X+eyttVOUIBGTJieliUzPYbnr1nMydOS+DBHD3B1bfbD0rZ443QJfvN+LmMiQrB1\nOnEJOHt2KjsONA7YoZ2RkUFFUwdt7gt5YXUrx7vXY+9mf307bZ1O9vSTMbi7JtXlFDTauoh3j+T6\nJLeC//l4N06X4PXrlzA5Kapfn24CwqKBaqJDgyjuMWjC7nCyZZ/eB9be6SAipPf/SH1bJ6f+bR1P\nXLmQZVMTPc9XumtW1S16IPMe1GEEs7+XqkbhRW2tnAveKK/+uffcY3hu5WLSYvU7+r68AgM0zpuX\nzrlz0ggJCiA1NoypydEsnhhPZIh+cV08MZ7TZiYTHRbE65tLeXnjfk6cmugZ+dN9V+1dm+gmY0wE\nZQ028g4209jexfnz0rjrrBkU17bx1NdFJIQH8NCKuXz938vJ+9NZLJ+RxO9X7+KSJzdw9XObPZML\nu5wunv66iG376z37FkJQ3qjXVta4O6VPnp4EwPyMODqdLvIrDnX4bnRn0i2uaaWyyUZokP6V99VP\n0bPMdhxo5PS/f813hbXER4Z4LlqapnHqMSkEBQZ4LrSDmUvxcW4FOWVN/P78WTx6+QLmjI3lvLl6\n2vL+2uSrmjvILizv5evLvcAdIIr7GYHU833dzU/f7K3hF69lExMeTJfTxeXPbOq1dnt/lNc2ERig\nMScjttfn7q5oodPpotPpYkPh4Qkju/8vvtlb0+v57pqE0yWGNOx4T2WLZx9mfy9VjcKLqKjB3U2M\nNMqrf2LCgj1pzqF/r79cfPis1ZCgAJZNTWRjcR0z02L0gDI3nTfcM79v/sECz7bdfRTd7fbeZIwJ\nZ29VC+uL9C/rCVMSSI4O49oTJ9HldNHUUE9i4qE7yceuWMA97+XS0NbJroPNnPfYd1wwL519tW1k\n7W/guEnxvH3jCYCeNPGGV7bx9o0n8J9dVUxPifLMYJ/rbsrJKWv0TFrc4HbYV9tGfGQIs8fGknew\n2eeQzp5l9s+1hZ4L60x3enFvuvsr/vDhLo6bmMDvz5/lczuAnAONhAUHcP7cdAICNE6flYIQgrDg\ngF6BoqPLSVhwoOfxHW/tYG9lMzct12ssY+PCKfAx8qk7uHaPQOq5j256HnNNi50ZqdE8vraQ1Jgw\nPrh5Kfvr2jn30W95ZdN+7j1npmdbp0tw7Utbufr4Cb3+x9qcAYyJCGFqchTvZ5cjhEDTNHaU6h31\nIYEBrNtbzemzei9L2u2x62Dv0U09m+CqmjuIDA0kNChw0EsB/+HD76lr7eSLO08x/XupahRedHX1\n3RlmJcrLGEPxWnVBJq9cu8TzxVyxaCwAiyaM4fjJh5ppEqJCCQzQDuvI7iZjTDhlDTY+2F7OjJTo\nXulJggMDDnOLDgvmiSsX8vr1x/PZ7SdxVmYqX+6uYndFM8dPjierpN7Tp/CZe1TTw5/vYUtJvWcl\nQYD02DASo0I9I6xa7Q5yypoIDtQoqWunvNFGWmwYk5MiPUHgs+8rWfCn//CDh9fx4BfFVLd0cKC+\nnS93V3Hh/HTGRAR7+l28GZ8Qwdi4cMobbLy4YR8tHX2XeXFNK5MSo3o1p2iaPoKsu8nl450VzPvj\nf/i2QL/TrmzqYGNxHbVtXby59QCx4cEcPznBd43C/ZwQvSdZ9qSoptWzIFZ1SwdbS+rZsq+eG06e\nTGiQPvR56dREPsmt6NVBv7OskXV7anjmm97NhfVtduIjg5mcGEmL3eEZ6rvjQCMpMaGcPD2JdXtq\nDuvsL/YEiia6nC7ufW8nuyuaqWzuIM1dW61o6uDUh7/mkS/1nE23v7mdG1/JYlOx75T2NS12tuyr\n55zZ+v+D2d9LFSi8cLnkXLFLeRljKF7pceGeDlbQJ9f9YvkU/nhB75FWgQEamekxzEqL9bmfjDER\n2B0u8itb+K8zpx/2en9uydFh/OOKBWT/7gxy/nAmvz53Ji4Ba/OrcboEa/dUExoUwJaSepwu4Vmb\nHPQL78LxcazNr6a0rp2t7m3OmZ1Gp8PFgXo9UExJivJcbJ/+pojQoECmJUfx3s4aTnpwLde+tBVN\n07jnnGP4+LaT+MuPZvt0jQ0PZv09p/Lo5QtwCcg50ORzO4Di2jYmJ0Ue9nxKTBhVTR1UNnXw6/dz\nsTtcPPTZHoQQfJxbgRAQFKBRWN3K1OQopqVEUdVsp9krKO2taiHZHbh9NT91OV2U1rV7+jZqWuy8\nsH4f8ZEhXH7codFLP5yTyoF6G2t2V3P5MxvZUFTLtwV6rWxLSX2v5V8b2h3ER4Ywx53EMtudRXj7\ngUbmj4tj+Ywkyhpsh40y6+7PaGjv4p1tZbyx5QBvbT1AVVOHJ8/ZhqJaKps7eC+7nD2VLXyw4yBf\n5Vdz+TObeg21vv+T3Tz0WT6f76rEJeBcd3Oe2d9LFSi8iIiIsFrBJ8rLGGZ4aZrG3Wcfw+yxhweE\n1Tcv47bTpvp837h4/Q78ssXjOLPHhdyIm6ZpBAUGMGdsLKkxYXyRV8WOAw00tHfx63NnEhIUQFps\nmGfJ2W7uPvsYBPD/ntvMXz7eTUhgACsWHerYTI0NJzM9hvJGGy+s38f20kauO2kSz/xkMe9dv4AV\nizIob7Bx4bx00mLDSY8L71Uj8sWC8XFoGmT16EuBQ0vF2h1ODtS3MyXx8ECRGhNGZXMHv/0gl06H\ni18sn0JueRMf7azgw5yDZKbHcOp0vTY3NSmKqe6O5sLqVjq6nPzwH9/y1tZSimvb+P/tnXt4lNWd\nxz+/yRVyv0JCQm5cYriHKIIURVG81Ru1aq2V2rVrq7bqdvehD61rby7W1a51q72ota622m7bR6q1\nqAjK7pabQAiJkYQQAkkkXAIBCYGQs3+cM8MwzEwyYTLzoufzPHkyc+ad837f33vm/b2/c877O5ea\nLp4mP+nld+w7Qm+fYtKoNIbFxbDnUA8bWw4wZ2z2KYPNl1WMJMYl3PXi+6xu2s/jb25lVcMeRqYm\nohS8Vn0y2jjU00dWUgKTC3Sda7bryG/HviNMLTwZhW40XVHNez/2zN4qztJt4Im39Sytd+o7+PjY\nCSaZtvZmrR5/aj3QzQ9fr8Ml8Ob9F5I2LI6nV+oZTTv3H+GXq5p4auU2nnyngdKcJMabWYHh/l1a\nR+HD/v37+98oClhdoTHUukTklCjDm1ll2Xz36oqAffahaBMR5lXk8l6D7vqIdQnXTRvFD6+byHeu\nqjhNw5jcZJ69vYrOI8dIiHPx8A2TqMg/6UxGpibyxfOLKM4azvf+Ukd87ElHkqy6+dH1k9j44GU8\neuOUAWtMSYxj/IiU09bl+N5f6pi15B3q2w/Rp/A7m2hkWiI7O4/w9gcdfHPeWB64dByl2Unc+7uN\nVO88wDVT8plZkOA5Nvf05y2tB/lrTTu1bV3869JajvX2MbUwnRGpCX6Xz31lnR5rGj8yhdxUnSq9\n/eDRU2wDkJEUzwVjsuntU1xSnsv6HZ2s39HJgumjmFyQxlMrG6l4cBm/eq+JfR8fIyMpjrgYF9OL\nMljdtI81pmtoamE6JdnJDIuLobati9q2g1z07yv5w/u7aDuoc4a5RI9LxLqElv26u6wgYzhZSfG0\nHugmOSGWuBhhVcNeLhiTTUl2ErfPLGJZ7W4aOw7x4uoduEQozUlid1cPV03K87SHcLd/O5jtQ35+\nfrQl+MXqCo1o6kqMi/FMWfVHqNpunVHEGzUfsax2NzNLs0gbFsfnqwoDbj+9KJOah+Z73iulpwR3\nHe1lZFoiSQmxPHHzNBY8/X98dnK+J9W7W1d8bOj3j9OLMli6qY0TfYoYl/Da5jaeNwn/Xvi7zqfl\nr+spNyUBpSAvLZGFs4qJjXHx2zvP5626j9hz+Bi3zBhN3/EedhyJ58rJeeSbKOoX7zaRnRxPdnI8\new+7l2pNoSQ7iaa9hzl45Dhrm/dT395F64FuXl63ky/MGM2E/FRykhNYY6av+huof/j6iTTvPcKk\nUWmc/2/L6T5+gs+MzaE0O5klf6tnuAh/3dLOoZ4TZJoB/RklmTz+9lb+c0Ujo9KHUVWcQYxLKM9L\noa6tyzP76Sdv6TGHCflplOUk09BxmIWzinnmf7YDuisuNzWRfR8fo7IogxiBFR/u4dqperzs9lnF\n/HJVE3e/tJGPuo4yf8IIvn7RGL71h2puqDwZOYa7/duIwoft27dHW4JfrK7QcKouCF3bOXmp/P3b\nl/DcwiqWLAh9nQER8dzNuwdLpxSms+z+Ofzo+pPjD2dis6riDA719NLQcYhdnUdY9Mcapo1OJyUh\nlqXVOuV7iZ+uJ3fKk/vmjfXMVBqZlshtM4t54NJxpCbG0bazhYeu0U/aiwiLr6yg9UA31bsOcteF\nZVw9OY9Yl1CWm0xpTjJ1bV3MWrKcO19Yz2NvbeXldTu5bmo+P7h2IiJ6EoI7Zb0/R1GQMZzZY/WS\nvjdWFZA+PI7K0RksmF7AusXzuLGqkI0tB1BApnl+ZEZpFkrpmUx3zC7xPAA6IT+VuvYuz7rq7jQq\nZblJTC7Q9vnGvLEe5zwyLdGziNe0wnRum1nEuBHJzJ+gu9WykhN44uZp9PSe4GD3cb58QQkTR6Xx\nt/vmnGLfcLd/G1H4UF5eHm0JfrG6QsOpumBw2uJjXVxcPqL/DQNQmpNE9a4Dp8zUKvPpCjoTm1UV\n6f74J5c3st+k9fjpzdNY8kY9r9e0k5uSQEri6Q/lzS3P5elbK/2O5QTSNbMsi3nnjGBVwx4WVBZw\n07mFfPmCEpITYpmQn8pv1/QxuzyXr84pZXJBOolxrlO66NyD3iNSEwI+C+Nm8VXncM/FY06Jss4v\nzeTn724DINN8f3JBGvGxLhJjXdx87slob2J+Gi+ubuHdrXuYUZLJmu37EYHirCQWXVHOnXNKSE2M\nY2phOmu372dEagIjzJjQ1NHpzB2fe9p5nz9hJPPOGUFrZzejs/yPRYS7/duIwodNmzZFW4JfrK7Q\ncKouiI62L5w3mvvnjfPc6frjTHQVZg7nn+eP5/Wadv7etI/vXl1BYeZwLi7XKVP8dTuBzgx8xaS8\noM8K+NP1k5um8Nq9s8lIiiclMY7pRTq9yk1VhSz/pwt5duG5zCjNYlh8zGnjOG5nWRHg+RBffb6D\n+VXFmR697sW2EuNiuPuiMXznqopTntafkK8Hp4+fUCyYXsB5xZkUZQ4nMS6GnJQEykdqDZ+dnMeU\ngjSGx8cyKmMYLtEPUAYixiUBnQSEv43ZiMKHysrKaEvwi9UVGk7VBdHRVlWcSVVxZtBtzlTX3XPH\nUJGnu1puMnfVF43PQeT06CUU/OlKSYzzG6HExrj63ZfHUeT37yj8kZwQy8RRaVTvPEDG8JMPXX5z\n3tjTth03MplYl9DbpzivOJPZY7L9poK/bWYxt80sBuD2mcXMKssiI8n/A50DIdxtzEYUPjh1kRSr\nKzScqgucqy0cuuaW53L33DGeu/is5AR+8cXp3HVhWVR1eeOOEAI9BzMQ3FNfswI8ne8mITaGMbnJ\n5KQkUJQ1nPz0YZ4Mx4FIGx7Xr1Pvj3DbTEJJEXw2UFVVpdavXx9tGRaLxaEcPX6Cp1Zu42sXljEs\n/vRUHwOh/WA3r29u5yuzSwJOk3azrPYjjh4/4Zm55FRE5H2lVJW/z2xE4cOGDRuiLcEvVldoOFUX\nOFfbp0VXYlwMD1w6btBOAiAvbRiVSQf6dRKgB58j7STCbbOoRBQiciPwEHAOcJ5Sym8IICKXA08A\nMcAzSqkl/dV9phFFX18fLpfz/KfVFRpO1QXO1WZ1hYZTdcHgtDkxotgC3AC8F2gDEYkBfgZcAVQA\nt4hI4PSUYaK+Pjzr6YYbqys0nKoLnKvN6goNp+qC8GuLyqwnpdQHQH9h23lAo1KqyWz7MnAtUDeU\n2kpKAj9RG02srtBwqi5wrjarKzScqgvCr82ZcZNmFLDT6/0uU3YaIvJVEVkvIuvb29vZu3cv7e3t\ntLa20tnZybZt2+ju7qauro6+vj5P/517ZsCGDRvo6+ujrq6O5uZmtm3bRmdnJ62trbjra25u5vDh\nw9TX19Pb2+tZvNxdh/t/TU0NPT09NDQ00NXVRUtLCx0dHXR0dNDS0kJXVxcNDQ309PRQU1Pjt47q\n6mp6e3upr6/n8OHDNDc309DQMOhj6u7uHrJjqq2tHfQxncl56u+YNm3aFJXzNJBjamtri/h5Gsgx\ntbW1Rfw8DeSYWlpaonKe+jumxsZGR10jvI+psbEx5GMKxpCNUYjI24C/xy0XK6VeNdusBL7lb4xC\nRD4HXK6U+gfz/jZghlLqnmD7PdMxis7OTjIyMgb9/aHC6goNp+oC52qzukLDqbpgcNqiMkahlJqn\nlJro5+/VAVbRCnhnPiswZUPKkSMDWwYx0lhdoeFUXeBcbVZXaDhVF4Rfm5O7ntYBY0WkRETigZuB\npUO9U6fOYrC6QsOpusC52qyu0HCqLgi/tqgcqYhcLyK7gJnA6yKyzJTni8hfAZRSvcA9wDLgA+D3\nSqnaodYWF3d6WgAnYHWFhlN1gXO1WV2h4VRdEH5tn7gns0VkD7DjDKrIBvaGSU44sbpCw6m6wLna\nrK7QcKouGJy2IqVUjr8PPnGO4kwRkfWBBnSiidUVGk7VBc7VZnWFhlN1Qfi1ObeTzWKxWCyOwDoK\ni8VisQTFOorT+WW0BQTA6goNp+oC52qzukLDqbogzNrsGIXFYrFYgmIjCovFYrEExToKi8VisQTF\nOgqDiFwuIh+KSKOILIqijkIRWSEidSJSKyLfNOUPiUiriGwyf1dGSV+ziNQYDetNWaaIvCUiDeZ/\nRBPgiMh4L7tsEpEuEbkvGjYTkedEpENEtniV+bWPaH5q2txmERmyxbQD6HpUROrNvv8sIummvFhE\nur3s9vOh0hVEW8BzJyLfNjb7UETmR1jXK16amkVkkymPmM2CXCOGrp0ppT71f+iFkbYBpUA8UA1U\nRElLHlBpXqcAW9HrcTyETqAYbVs1A9k+ZT8GFpnXi4BHonwuPwKKomEzYA5QCWzpzz7AlcAbgADn\nA2sirOsyINa8fsRLV7H3dlGymd9zZ34L1UACUGJ+tzGR0uXz+WPAg5G2WZBrxJC1MxtRaDxrXyil\njgHutS8ijlKqXSm1wbw+hE5f4uzFdrWtfmNe/wa4LopaLgG2KaXO5On8QaOUeg/Y71McyD7XAi8o\nzWogXUTyIqVLKfWm0qlyAFajE29GnAA2C8S1wMtKqR6l1HagEf37jaguERHg88DvhmLfwQhyjRiy\ndmYdhWbAa19EEhEpBqYBa0zRPSZ0fC7S3TteKOBNEXlfRL5qykYopdrN64+AEdGRBujkkd4/XifY\nLJB9nNTu7kDfdbopEZGNIvKuiHwmSpr8nTun2OwzwG6lVINXWcRt5nONGLJ2Zh2FQxGRZOCPwH1K\nqS7gaaAMmAq0o8PeaDBbKVWJXqL2bhGZ4/2h0rFuVOZci84yfA3wB1PkFJt5iKZ9AiEii4Fe4CVT\n1A6MVkpNAx4AfisiqRGW5bhz58MtnHpDEnGb+blGeAh3O7OOQhOVtS8CISJx6AbwklLqTwBKqd1K\nqRNKqT7gVwxRuN0fSqlW878D+LPRsdsdypr/HdHQhnZeG5RSu41GR9iMwPaJersTkYXA1cCt5uKC\n6dbZZ16/jx4HGBdJXUHOnRNsFgvcALziLou0zfxdIxjCdmYdhSYqa1/4w/R9Pgt8oJR63Kvcu0/x\nemCL73cjoC1JRFLcr9GDoVvQtrrdbHY7MNDFqcLNKXd5TrCZIZB9lgJfMrNSzgcOenUdDDkicjnw\nL8A1SqkjXuU5IhJjXpcCY4GmSOky+w107pYCN4tIgoiUGG1rI6kNmAfUK6V2uQsiabNA1wiGsp1F\nYpT+bPhDzwzYir4TWBxFHbPRIeNmYJP5uxL4L6DGlC8F8qKgrRQ946QaqHXbCcgClgMNwNtAZhS0\nJQH7gDSvsojbDO2o2oHj6L7grwSyD3oWys9Mm6sBqiKsqxHdd+1uZz832y4w53cTsAH4bBRsFvDc\nAYuNzT4EroikLlP+PHCXz7YRs1mQa8SQtTObwsNisVgsQbFdTxaLxWIJinUUFovFYgmKdRQWi8Vi\nCYp1FBaLxWIJinUUFovFYgmKdRQWxyMiSkQe83r/LRF5KEx1Py8inwtHXf3s50YR+UBEVviUF7uz\nk4rIVAljhlsRSReRr3u9zxeR/w5X/ZZPD9ZRWM4GeoAbRCQ72kK8MU/oDpSvAHcqpeYG2WYqej58\nuDSkAx5HoZRqU0oNuVO0fPKwjsJyNtCLXgP4ft8PfCMCETls/l9kkrO9KiJNIrJERG4VkbWi19Mo\n86pmnoisF5GtInK1+X6M6PUa1pnEdP/oVe8qEVkK1PnRc4upf4uIPGLKHkQ/JPWsiDzq7wBNRoDv\nAzeJXs/gJvMk/HNG80YRudZsu1BElorIO8ByEUkWkeUissHs2535eAlQZup71Cd6SRSRX5vtN4rI\nXK+6/yQifxO9rsGPvezxvDmuGhE57VxYPrmEckdksUSTnwGb3ReuATIFOAedKroJeEYpdZ7ohV7u\nBe4z2xWjcwmVAStEZAzwJXSqg3NFJAH4XxF502xfCUxUOs21BxHJR6/rMB3oRGfZvU4p9X0RuRi9\nvsJ6f0KVUseMQ6lSSt1j6nsYeEcpdYfoRYXWisjbXhomK6X2m6jieqVUl4m6VhtHtsjonGrqK/ba\n5d16t2qSiJQbre7cRFPRGUl7gA9F5EkgFxillJpo6krvx/aWTxA2orCcFSidHfMF4BshfG2d0rn7\ne9DpC9wX+hq0c3Dze6VUn9Ipo5uAcnQeqy+JXsFsDTo9wliz/VpfJ2E4F1iplNqj9DoPL6EXvxks\nlwGLjIaVQCIw2nz2llLKvVaCAA+LyGZ06oZR9J/qfTbwIoBSqh7YwckkdsuVUgeVUkfRUVMR2i6l\nIvKkyRHV5adOyycUG1FYzib+A51H59deZb2YGx4RcaFXKHTT4/W6z+t9H6e2fd88Ngp98b1XKbXM\n+wMRuQj4eHDyQ0aABUqpD300zPDRcCuQA0xXSh0XkWa0Uxks3nY7gV4Fr1NEpgDzgbvQi/bccQb7\nsJxF2IjCctZg7qB/jx4YdtOM7uoBvRZF3CCqvlFEXGbcohSdbG4Z8DXR6ZwRkXGiM+YGYy1woYhk\ni84kegvwbgg6DqGXtnSzDLhXRMRomBbge2lAh3ESc9ERgL/6vFmFdjCYLqfR6OP2i+nSciml/gh8\nB931ZfmUYB2F5WzjMcB79tOv0BfnamAmg7vbb0Ff5N9AZwU9CjyD7nbZYAaAf0E/EbjSqZsXASvQ\nGXbfV0qFknJ9BVDhHswGfoB2fJtFpNa898dLQJWI1KDHVuqNnn3osZUtfgbRnwJc5juvAAtNF10g\nRgErTTfYi8C3Qzguy1mOzR5rsVgslqDYiMJisVgsQbGOwmKxWCxBsY7CYrFYLEGxjsJisVgsQbGO\nwmKxWCxBsY7CYrFYLEGxjsJisVgsQfl/cr6qFr5RwakAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}